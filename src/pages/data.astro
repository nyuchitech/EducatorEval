---
import Layout from '../layouts/Layout.astro';
import DataManagementTabs from '../components/DataManagementTabs';
import FileUpload from '../components/FileUpload';

const pathname = Astro.url.pathname;

const processingJobs = [
  {
    id: 1,
    type: 'CSV Import',
    filename: 'teachers_data.csv',
    status: 'completed',
    progress: 100,
    records: 150,
    errors: 0,
    startTime: '2025-08-20 14:30',
    endTime: '2025-08-20 14:32'
  },
  {
    id: 2,
    type: 'BigQuery Sync',
    source: 'Student Analytics',
    status: 'processing',
    progress: 65,
    records: 2847,
    errors: 3,
    startTime: '2025-08-20 15:00',
    endTime: null
  },
  {
    id: 3,
    type: 'API Import',
    source: 'SIS Integration',
    status: 'failed',
    progress: 45,
    records: 0,
    errors: 15,
    startTime: '2025-08-20 13:15',
    endTime: '2025-08-20 13:20'
  }
];

const apiConnections = [
  {
    id: 1,
    name: 'Student Information System',
    type: 'SIS',
    status: 'connected',
    lastSync: '2025-08-20 14:00',
    endpoint: 'https://api.schoolsis.edu/v1',
    recordCount: 1250
  },
  {
    id: 2,
    name: 'Google BigQuery',
    type: 'Analytics',
    status: 'connected',
    lastSync: '2025-08-20 15:00',
    endpoint: 'bigquery.googleapis.com',
    recordCount: 5680
  },
  {
    id: 3,
    name: 'Learning Management System',
    type: 'LMS',
    status: 'error',
    lastSync: '2025-08-19 16:30',
    endpoint: 'https://lms.school.edu/api',
    recordCount: 0
  }
];

const getStatusIcon = (status: string) => {
    switch (status) {
      case 'completed':
        return `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-check-circle w-5 h-5 text-green-500"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"/><polyline points="22 4 12 14.01 9 11.01"/></svg>`;
      case 'processing':
        return `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-refresh-cw w-5 h-5 text-blue-500 animate-spin"><path d="M21 12a9 9 0 0 0-9-9 9.75 9.75 0 0 0-6.74 2.74L3 8"/><path d="M3 3v5h5"/><path d="M3 12a9 9 0 0 0 9 9 9.75 9.75 0 0 0 6.74-2.74L21 16"/><path d="M21 21v-5h-5"/></svg>`;
      case 'failed':
        return `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-alert-triangle w-5 h-5 text-red-500"><path d="m21.73 18-8-14a2 2 0 0 0-3.46 0l-8 14A2 2 0 0 0 4 22h16a2 2 0 0 0 1.73-4Z"/><path d="M12 9v4"/><path d="M12 17h.01"/></svg>`;
      default:
        return `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucude-refresh-cw w-5 h-5 text-gray-400"><path d="M21 12a9 9 0 0 0-9-9 9.75 9.75 0 0 0-6.74 2.74L3 8"/><path d="M3 3v5h5"/><path d="M3 12a9 9 0 0 0 9 9 9.75 9.75 0 0 0 6.74-2.74L21 16"/><path d="M21 21v-5h-5"/></svg>`;
    }
  };

const getStatusBadge = (status: string) => {
    const styles = {
      'completed': 'bg-green-100 text-green-800',
      'processing': 'bg-blue-100 text-blue-800',
      'failed': 'bg-red-100 text-red-800',
      'connected': 'bg-green-100 text-green-800',
      'error': 'bg-red-100 text-red-800',
      'disconnected': 'bg-gray-100 text-gray-800'
    };

    return (
      `<span class="px-2 py-1 rounded-full text-xs font-medium ${styles[status as keyof typeof styles]}">${status.charAt(0).toUpperCase() + status.slice(1)}</span>`
    );
  };
---

<Layout pathname={pathname}>
  <div class="min-h-screen bg-gray-50">
    {/* Header */}
    <div class="bg-white shadow-sm border-b">
      <div class="px-6 py-4">
        <div class="flex items-center justify-between">
          <div>
            <h1 class="text-2xl font-bold text-gray-900">Data Management</h1>
            <p class="text-sm text-gray-600 mt-1">Import, export, and sync observation data for CRP in Action initiative</p>
          </div>
          <div class="flex items-center space-x-3">
            <button class="px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50 font-medium">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-download w-4 h-4 inline mr-2"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/><polyline points="7 10 12 15 17 10"/><line x1="12" x2="12" y1="15" y2="3"/></svg>
              <span>Export Data</span>
            </button>
            <button class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 font-medium">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-settings w-4 h-4 inline mr-2"><path d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.78 1.28a2 2 0 0 0 .73 2.73l.15.08a2 2 0 0 1 1 1.74v.18a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.78-1.28a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74V4a2 2 0 0 0-2-2z"/><circle cx="12" cy="12" r="3"/></svg>
              <span>Configure</span>
            </button>
          </div>
        </div>
      </div>
    </div>

    {/* Tabs */}
    <div class="bg-white border-b">
      <div class="px-6">
        <DataManagementTabs client:load />
      </div>
    </div>

    <div class="px-6 py-6">
      {/* Import Tab */}
      {/* API Connections Tab */}
      <div id="connections-tab-content">
        <div class="max-w-6xl">
          <div class="bg-white rounded-lg shadow-sm border">
            <div class="px-6 py-4 border-b border-gray-200">
              <div class="flex items-center justify-between">
                <h2 class="text-lg font-semibold text-gray-900">API Connections</h2>
                <button class="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 font-medium">
                  Add Connection
                </button>
              </div>
            </div>

            <div class="overflow-x-auto">
              <table class="w-full">
                <thead class="bg-gray-50">
                  <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Connection</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Last Sync</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Records</th>
                    <th class="px-6 py-4 whitespace-nowrap text-sm font-medium">Actions</th>
                  </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                  {apiConnections.map((connection) => (
                    <tr key={connection.id} class="hover:bg-gray-50">
                      <td class="px-6 py-4 whitespace-nowrap">
                        <div>
                          <div class="text-sm font-medium text-gray-900">{connection.name}</div>
                          <div class="text-sm text-gray-500">{connection.endpoint}</div>
                        </div>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {connection.type}
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap">
                        {getStatusBadge(connection.status)}
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {connection.lastSync}
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {connection.recordCount.toLocaleString()}
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <div class="flex items-center space-x-2">
                          <button class="text-blue-600 hover:text-blue-900">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-refresh-cw w-4 h-4"><path d="M21 12a9 9 0 0 0-9-9 9.75 9.75 0 0 0-6.74 2.74L3 8"/><path d="M3 3v5h5"/><path d="M3 12a9 9 0 0 0 9 9 9.75 9.75 0 0 0 6.74-2.74L21 16"/><path d="M21 21v-5h-5"/></svg>
                          </button>
                          <button class="text-gray-600 hover:text-gray-900">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-edit w-4 h-4"><path d="M17 3a2.85 2.85 0 0 0-4 4L7.5 17.5 4 19.9l1.5-3.5L17 7a2.85 2.85 0 0 0 4 4L22 5l-3-3Z"/><path d="m15 5 4 4"/></svg>
                          </button>
                          <button class="text-red-600 hover:text-red-800">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-x w-4 h-4"><path d="M18 6 6 18"/><path d="m6 6 12 12"/></svg>
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>

        {/* Processing Jobs Tab */}
        <div id="jobs-tab-content">
          <div class="max-w-6xl">
            <div class="bg-white rounded-lg shadow-sm border">
              <div class="px-6 py-4 border-b border-gray-200">
                <h2 class="text-lg font-semibold text-gray-900">Processing Jobs</h2>
              </div>

              <div class="divide-y divide-gray-200">
                {processingJobs.map((job) => (
                  <div key={job.id} class="px-6 py-4">
                    <div class="flex items-center justify-between">
                      <div class="flex items-center space-x-4">
                        {getStatusIcon(job.status)}
                        <div>
                          <h3 class="text-sm font-medium text-gray-900">
                            {job.type} - {job.filename || job.source}
                          </h3>
                          <p class="text-sm text-gray-500">
                            Started: {job.startTime} {job.endTime && `• Completed: ${job.endTime}`}
                          </p>
                        </div>
                      </div>
                      <div class="flex items-center space-x-4">
                        <div class="text-right">
                          <p class="text-sm text-gray-900">{job.records} records</p>
                          {job.errors > 0 && (
                            <p class="text-sm text-red-600">{job.errors} errors</p>
                          )}
                        </div>
                        {getStatusBadge(job.status)}
                      </div>
                    </div>

                    {job.status === 'processing' && (
                      <div class="mt-3">
                        <div class="flex items-center justify-between text-sm text-gray-600 mb-1">
                          <span>Progress</span>
                          <span>{job.progress}%</span>
                        </div>
                        <div class="w-full bg-gray-200 rounded-full h-2">
                          <div
                            class="bg-blue-500 h-2 rounded-full transition-all duration-300"
                            style={{ width: `${job.progress}%` }}
                          ></div>
                        </div>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>

        {/* Export Tab */}
        <div id="export-tab-content">
          <div class="max-w-4xl">
            <div class="bg-white rounded-lg shadow-sm border p-6">
              <h2 class="text-lg font-semibold text-gray-900 mb-6">Export Data</h2>

              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Data Type</label>
                  <select class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    <option>All Observations</option>
                    <option>Teacher Data</option>
                    <option>Student Data</option>
                    <option>Framework Responses</option>
                  </select>
                </div>

                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Format</label>
                  <select class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    <option>CSV</option>
                    <option>Excel (XLSX)</option>
                    <option>JSON</option>
                    <option>PDF Report</option>
                  </select>
                </div>

                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Date Range</label>
                  <div class="grid grid-cols-2 gap-2">
                    <input
                      type="date"
                      class="p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    />
                    <input
                      type="date"
                      class="p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    />
                  </div>
                </div>

                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Destination</label>
                  <select class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    <option>Download File</option>
                    <option>Email Report</option>
                    <option>Google Drive</option>
                    <option>BigQuery</option>
                  </select>
                </div>
              </div>

              <div class="mt-6 flex space-x-3">
                <button class="bg-blue-500 text-white px-6 py-2 rounded-lg hover:bg-blue-600 font-medium">
                  Generate Export
                </button>
                <button class="bg-gray-100 text-gray-700 px-6 py-2 rounded-lg hover:bg-gray-200 font-medium">
                  Schedule Export
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
</Layout>
