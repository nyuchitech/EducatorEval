---
import Layout from '../layouts/Layout.astro';
import FilterControls from '../components/FilterControls';
// Removed: import { FileText, Users, TrendingUp, Calendar, Download, Upload, Settings, Search, Filter, MoreVertical, Eye, Edit, Trash2, Plus } from 'lucide-react';

const pathname = Astro.url.pathname;

const stats = [
  { title: 'Total Observations', value: '247', change: '+12%', target: '5,000 by May 2026', icon: 'FileText', color: 'blue' },
  { title: 'Active Observers', value: '68', change: '+5%', target: '80 target', icon: 'Users', color: 'green' },
  { title: 'CRP Evidence', value: '68%', change: '+8%', target: '70% goal', icon: 'TrendingUp', color: 'purple' },
  { title: 'This Week', value: '18', change: '+25%', target: '~32 weekly target', icon: 'Calendar', color: 'orange' }
];

const recentObservations = [
  {
    id: 1,
    teacher: 'Sarah Johnson',
    subject: 'Mathematics',
    grade: '5th Grade',
    date: '2025-08-19',
    crpEvidence: 8,
    totalLookfors: 10,
    observer: 'Dr. Smith',
    status: 'completed'
  },
  {
    id: 2,
    teacher: 'Michael Brown',
    subject: 'Science',
    grade: '3rd Grade',
    date: '2025-08-19',
    crpEvidence: 7,
    totalLookfors: 10,
    observer: 'Ms. Davis',
    status: 'completed'
  },
  {
    id: 3,
    teacher: 'Emily Wilson',
    subject: 'English',
    grade: '7th Grade',
    date: '2025-08-18',
    crpEvidence: 9,
    totalLookfors: 10,
    observer: 'Dr. Smith',
    status: 'completed'
  },
  {
    id: 4,
    teacher: 'David Chen',
    subject: 'History',
    grade: '6th Grade',
    date: '2025-08-18',
    crpEvidence: null,
    totalLookfors: null,
    observer: 'Ms. Davis',
    status: 'in-progress'
  }
];

const getStatusBadge = (status: string) => {
    const styles = {
      'completed': 'bg-green-100 text-green-800',
      'in-progress': 'bg-yellow-100 text-yellow-800',
      'draft': 'bg-gray-100 text-gray-800'
    };

    return (
      `<span class="px-2 py-1 rounded-full text-xs font-medium ${styles[status as keyof typeof styles]}">${status === 'in-progress' ? 'In Progress' : status.charAt(0).toUpperCase() + status.slice(1)}</span>`
    );
  };
---

<Layout pathname={pathname}>
  <div class="min-h-screen bg-gray-50">
    {/* Header */}
    <div class="bg-white shadow-sm border-b">
      <div class="px-6 py-4">
        <div class="flex items-center justify-between">
          <div>
            <h1 class="text-2xl font-bold text-gray-900">CRP in Action Dashboard</h1>
            <p class="text-sm text-gray-600 mt-1">Leading with Observation: Culturally Responsive Practices across all learning spaces</p>
          </div>
          <div class="flex items-center space-x-3">
            <button class="bg-blue-500 text-white px-4 py-2 rounded-lg font-medium flex items-center space-x-2 hover:bg-blue-600 transition-colors">
              {/* Icons will be handled by React components or inlined SVGs if purely static */}
              <span>New Observation</span>
            </button>
            <button class="p-2 text-gray-600 hover:text-gray-900">
               {/* Icons will be handled by React components or inlined SVGs if purely static */}
            </button>
          </div>
        </div>
      </div>
    </div>

    <div class="px-6 py-6">
      {/* Filters - Handled by React Component */}
      <FilterControls client:load />

      {/* Stats Grid */}
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        {stats.map((stat, index) => {
          const colorClasses = {
            blue: 'bg-blue-500',
            green: 'bg-green-500',
            purple: 'bg-purple-500',
            orange: 'bg-orange-500'
          };

          // Icons will be handled by React components or inlined SVGs if purely static
          // For now, using placeholder comments
          let IconComponent;
           switch (stat.icon) {
            case 'FileText':
              // IconComponent = FileText;
              break;
            case 'Users':
              // IconComponent = Users;
              break;
            case 'TrendingUp':
              // IconComponent = TrendingUp;
              break;
            case 'Calendar':
              // IconComponent = Calendar;
              break;
            default:
              break;
          }

          return (
            <div key={index} class="bg-white rounded-lg p-6 shadow-sm border">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm font-medium text-gray-600">{stat.title}</p>
                  <p class="text-2xl font-bold text-gray-900 mt-1">{stat.value}</p>
                  <p class="text-sm text-green-600 mt-1">{stat.change} from last period</p>
                  <p class="text-xs text-gray-500 mt-1">{stat.target}</p>
                </div>
                <div class={`p-3 rounded-lg ${colorClasses[stat.color as keyof typeof colorClasses]}`}>
                   {/* <IconComponent class="w-6 h-6 text-white" /> */}
                </div>
              </div>
            </div>
          );
        })}
      </div>

      {/* Recent Observations */}
      <div class="bg-white rounded-lg shadow-sm border">
        <div class="px-6 py-4 border-b border-gray-200">
          <div class="flex items-center justify-between">
            <h2 class="text-lg font-semibold text-gray-900">Recent Observations</h2>
            <div class="flex items-center space-x-3">
              <div class="relative">
                {/* Icons will be handled by React components or inlined SVGs if purely static */}
                <input
                  type="text"
                  placeholder="Search observations..."
                  class="pl-10 pr-4 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>
              <button class="p-2 text-gray-600 hover:text-gray-900 border border-gray-300 rounded-lg">
                 {/* Icons will be handled by React components or inlined SVGs if purely static */}
              </button>
              <button class="p-2 text-gray-600 hover:text-gray-900 border border-gray-300 rounded-lg">
                 {/* Icons will be handled by React components or inlined SVGs if purely static */}
              </button>
            </div>
          </div>
        </div>

        <div class="overflow-x-auto">
          <table class="w-full">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Teacher</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Subject</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">CRP Evidence</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Observer</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                <th class="px-6 py-4 whitespace-nowrap text-sm font-medium">Actions</th>
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
              {recentObservations.map((observation) => (
                <tr key={observation.id} class="hover:bg-gray-50">
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div>
                      <div class="text-sm font-medium text-gray-900">{observation.teacher}</div>
                      <div class="text-sm text-gray-500">{observation.grade}</div>
                    </div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {observation.subject}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {new Date(observation.date).toLocaleDateString()}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    {observation.crpEvidence !== null ? (
                      <div>
                        <span class={`text-sm font-medium ${
                          observation.crpEvidence >= 7 ? 'text-green-600' :
                          observation.crpEvidence >= 5 ? 'text-blue-600' : 'text-yellow-600'
                        }`}>
                          {observation.crpEvidence}/{observation.totalLookfors}
                        </span>
                        <div class="text-xs text-gray-500">
                          {Math.round((observation.crpEvidence / observation.totalLookfors!) * 100)}% evidence
                        </div>
                      </div>
                    ) : (
                      <span class="text-sm text-gray-400">In Progress</span>
                    )}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {observation.observer}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    {/* Status badge handled by getStatusBadge function */}
                    {getStatusBadge(observation.status)}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <div class="flex items-center space-x-2">
                       {/* Icons will be handled by React components or inlined SVGs if purely static */}
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Quick Actions */}
      <div class="mt-8 grid grid-cols-1 md:grid-cols-3 gap-6">
        <div class="bg-white rounded-lg p-6 shadow-sm border">
          <h3 class="text-lg font-semibold text-gray-900 mb-4">Quick Actions</h3>
          <div class="space-y-3">
            <button class="w-full text-left p-3 rounded-lg hover:bg-gray-50 border border-gray-200 flex items-center space-x-3">
               {/* Icons will be handled by React components or inlined SVGs if purely static */}
              <span class="text-sm font-medium">Bulk Upload Data</span>
            </button>
            <button class="w-full text-left p-3 rounded-lg hover:bg-gray-50 border border-gray-200 flex items-center space-x-3">
               {/* Icons will be handled by React components or inlined SVGs if purely static */}
              <span class="text-sm font-medium">Manage Frameworks</span>
            </button>
            <button class="w-full text-left p-3 rounded-lg hover:bg-gray-50 border border-gray-200 flex items-center space-x-3">
               {/* Icons will be handled by React components or inlined SVGs if purely static */}
              <span class="text-sm font-medium">User Management</span>
            </button>
          </div>
        </div>

        <div class="bg-white rounded-lg p-6 shadow-sm border">
          <h3 class="text-lg font-semibold text-gray-900 mb-4">Recent Activity</h3>
          <div class="space-y-3">
            <div class="flex items-start space-x-3">
              <div class="w-2 h-2 bg-blue-500 rounded-full mt-2"></div>
              <div>
                <p class="text-sm text-gray-900">New observation completed</p>
                <p class="text-xs text-gray-500">2 minutes ago</p>
              </div>
            </div>
            <div class="flex items-start space-x-3">
              <div class="w-2 h-2 bg-green-500 rounded-full mt-2"></div>
              <div>
                <p class="text-sm text-gray-900">Framework updated</p>
                <p class="text-xs text-gray-500">1 hour ago</p>
              </div>
            </div>
            <div class="flex items-start space-x-3">
              <div class="w-2 h-2 bg-purple-500 rounded-full mt-2"></div>
              <div>
                <p class="text-sm text-gray-900">Bulk data imported</p>
                <p class="text-xs text-gray-500">3 hours ago</p>
              </div>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-lg p-6 shadow-sm border">
          <h3 class="text-lg font-semibold text-gray-900 mb-4">System Status</h3>
          <div class="space-y-3">
            <div class="flex items-center justify-between">
              <span class="text-sm text-gray-600">API Status</span>
              <span class="px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs font-medium">Operational</span>
            </div>
            <div class="flex items-center justify-between">
              <span class="text-sm text-gray-600">Database</span>
              <span class="px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs font-medium">Healthy</span>
            </div>
            <div class="flex items-center justify-between">
              <span class="text-sm text-gray-600">Last Backup</span>
              <span class="text-xs text-gray-500">2 hours ago</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>
